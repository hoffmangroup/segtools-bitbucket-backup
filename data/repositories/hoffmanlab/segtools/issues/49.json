{"priority": "minor", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/hoffmanlab/segtools.json"}, "html": {"href": "#!/hoffmanlab/segtools"}, "avatar": {"href": "data/bytebucket.org/ravatar/{981b7f63-4900-4255-97c0-c244f833a3ee}ts=python"}}, "type": "repository", "name": "segtools", "full_name": "hoffmanlab/segtools", "uuid": "{981b7f63-4900-4255-97c0-c244f833a3ee}"}, "links": {"attachments": {"href": "data/repositories/hoffmanlab/segtools/issues/49/attachments_page=1.json"}, "self": {"href": "data/repositories/hoffmanlab/segtools/issues/49.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/hoffmanlab/segtools/issues/49/watch"}, "comments": {"href": "data/repositories/hoffmanlab/segtools/issues/49/comments_page=1.json"}, "html": {"href": "#!/hoffmanlab/segtools/issues/49/segtools-overlap-cannot-handle-stranded"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/hoffmanlab/segtools/issues/49/vote"}}, "reporter": {"display_name": "Rachel Chan", "uuid": "{20430f8d-4e6b-48cc-a8d8-c64868bf7e79}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B20430f8d-4e6b-48cc-a8d8-c64868bf7e79%7D"}, "html": {"href": "https://bitbucket.org/%7B20430f8d-4e6b-48cc-a8d8-c64868bf7e79%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/4397abec9f84e35f1f235b350984833dd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsRC-1.png"}}, "nickname": "rcwchan", "type": "user", "account_id": "557058:e439e22e-8cfc-4cf1-b090-030d33a0730e"}, "title": "Segtools overlap cannot handle stranded segmentation files", "component": null, "votes": 0, "watches": 2, "content": {"raw": "Not sure if this is by design, but inputting a stranded segmentation file to segtools overlap will result in a SegmentOverlapError due to the following piece of code (line 351, `__init__.py`):\r\n\r\n\r\n```\r\n#!python\r\n\r\n    def _from_file(self, filename, verbose=True):\r\n        \"\"\"Wrap file loading to ensure no segments overlap\r\n\r\n        This is preferred to wrapping __init__ because we don't need to check\r\n        overlapping and don't want to load metadata if the Segmentation is\r\n        being loaded from a pickle file instead of a BED/GFF file.\r\n        \"\"\"\r\n        super(self.__class__, self)._from_file(filename, verbose=verbose)\r\n\r\n        for chrom, segments in self.chromosomes.iteritems():\r\n            # Make sure there are no overlapping segments\r\n            if segments.shape[0] > 1 and \\\r\n                    (segments['end'][:-1] > segments['start'][1:]).any():\r\n                raise self.SegmentOverlapError(\"Found overlapping segments\"\r\n                                               \" in chromosome: %s\" % chrom)\r\n\r\n```\r\n\r\nThe Segmentation class this function is part of explicitly states in the docstring that `Strand information is not included`.\r\n\r\nNote that if a stranded annotation file is provided, segtools raises no errors.\r\n\r\nI found this unexpected because the `segtools-overlap --help` message implies that the operation should be bidirectional:\r\n\r\n\r\n```\r\n#!python\r\n\r\nUsage: segtools-overlap [OPTIONS] SEGMENTATION ANNOTATION\r\n\r\nSEGMENTATION and ANNOTATION files should be in BED, GFF, or GTF format\r\n(grouped on 'name'/'feature' columns). Results summarize the overlap of\r\nSEGMENTATION groups with ANNOTATION groups. The symmetric analysis can be\r\nperformed by rerunning the program with the input file arguments swapped (and\r\na different output directory).\r\n\r\n```\r\n\r\nIf this is by design, it should be clarified that symmetric analysis cannot be performed when one or more files are stranded.", "markup": "markdown", "html": "<p>Not sure if this is by design, but inputting a stranded segmentation file to segtools overlap will result in a SegmentOverlapError due to the following piece of code (line 351, <code>__init__.py</code>):</p>\n<div class=\"codehilite language-python\"><pre><span></span>    <span class=\"k\">def</span> <span class=\"nf\">_from_file</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">filename</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Wrap file loading to ensure no segments overlap</span>\n\n<span class=\"sd\">        This is preferred to wrapping __init__ because we don&#39;t need to check</span>\n<span class=\"sd\">        overlapping and don&#39;t want to load metadata if the Segmentation is</span>\n<span class=\"sd\">        being loaded from a pickle file instead of a BED/GFF file.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"vm\">__class__</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">_from_file</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"n\">verbose</span><span class=\"p\">)</span>\n\n        <span class=\"k\">for</span> <span class=\"n\">chrom</span><span class=\"p\">,</span> <span class=\"n\">segments</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">chromosomes</span><span class=\"o\">.</span><span class=\"n\">iteritems</span><span class=\"p\">():</span>\n            <span class=\"c1\"># Make sure there are no overlapping segments</span>\n            <span class=\"k\">if</span> <span class=\"n\">segments</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span> <span class=\"ow\">and</span> \\\n                    <span class=\"p\">(</span><span class=\"n\">segments</span><span class=\"p\">[</span><span class=\"s1\">&#39;end&#39;</span><span class=\"p\">][:</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">segments</span><span class=\"p\">[</span><span class=\"s1\">&#39;start&#39;</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">:])</span><span class=\"o\">.</span><span class=\"n\">any</span><span class=\"p\">():</span>\n                <span class=\"k\">raise</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">SegmentOverlapError</span><span class=\"p\">(</span><span class=\"s2\">&quot;Found overlapping segments&quot;</span>\n                                               <span class=\"s2\">&quot; in chromosome: </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">chrom</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p>The Segmentation class this function is part of explicitly states in the docstring that <code>Strand information is not included</code>.</p>\n<p>Note that if a stranded annotation file is provided, segtools raises no errors.</p>\n<p>I found this unexpected because the <code>segtools-overlap --help</code> message implies that the operation should be bidirectional:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"n\">Usage</span><span class=\"p\">:</span> <span class=\"n\">segtools</span><span class=\"o\">-</span><span class=\"n\">overlap</span> <span class=\"p\">[</span><span class=\"n\">OPTIONS</span><span class=\"p\">]</span> <span class=\"n\">SEGMENTATION</span> <span class=\"n\">ANNOTATION</span>\n\n<span class=\"n\">SEGMENTATION</span> <span class=\"ow\">and</span> <span class=\"n\">ANNOTATION</span> <span class=\"n\">files</span> <span class=\"n\">should</span> <span class=\"n\">be</span> <span class=\"ow\">in</span> <span class=\"n\">BED</span><span class=\"p\">,</span> <span class=\"n\">GFF</span><span class=\"p\">,</span> <span class=\"ow\">or</span> <span class=\"n\">GTF</span> <span class=\"n\">format</span>\n<span class=\"p\">(</span><span class=\"n\">grouped</span> <span class=\"n\">on</span> <span class=\"s1\">&#39;name&#39;</span><span class=\"o\">/</span><span class=\"s1\">&#39;feature&#39;</span> <span class=\"n\">columns</span><span class=\"p\">)</span><span class=\"o\">.</span> <span class=\"n\">Results</span> <span class=\"n\">summarize</span> <span class=\"n\">the</span> <span class=\"n\">overlap</span> <span class=\"n\">of</span>\n<span class=\"n\">SEGMENTATION</span> <span class=\"n\">groups</span> <span class=\"k\">with</span> <span class=\"n\">ANNOTATION</span> <span class=\"n\">groups</span><span class=\"o\">.</span> <span class=\"n\">The</span> <span class=\"n\">symmetric</span> <span class=\"n\">analysis</span> <span class=\"n\">can</span> <span class=\"n\">be</span>\n<span class=\"n\">performed</span> <span class=\"n\">by</span> <span class=\"n\">rerunning</span> <span class=\"n\">the</span> <span class=\"n\">program</span> <span class=\"k\">with</span> <span class=\"n\">the</span> <span class=\"nb\">input</span> <span class=\"nb\">file</span> <span class=\"n\">arguments</span> <span class=\"n\">swapped</span> <span class=\"p\">(</span><span class=\"ow\">and</span>\n<span class=\"n\">a</span> <span class=\"n\">different</span> <span class=\"n\">output</span> <span class=\"n\">directory</span><span class=\"p\">)</span><span class=\"o\">.</span>\n</pre></div>\n\n\n<p>If this is by design, it should be clarified that symmetric analysis cannot be performed when one or more files are stranded.</p>", "type": "rendered"}, "assignee": {"display_name": "Eric Roberts", "uuid": "{cd8c1fe0-28ca-45fb-8ef9-48090b42bb80}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D"}, "html": {"href": "https://bitbucket.org/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/17548d71dfb29d015b880f48cfc01ca3d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsER-5.png"}}, "nickname": "ericr86", "type": "user", "account_id": "557058:c80ca578-03a1-4ac6-b3ee-50372a3fceee"}, "state": "new", "version": null, "edited_on": null, "created_on": "2017-08-11T15:02:06.990494+00:00", "milestone": null, "updated_on": "2017-08-11T15:02:06.990494+00:00", "type": "issue", "id": 49}