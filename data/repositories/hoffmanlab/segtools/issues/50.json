{"priority": "minor", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/hoffmanlab/segtools.json"}, "html": {"href": "#!/hoffmanlab/segtools"}, "avatar": {"href": "data/bytebucket.org/ravatar/{981b7f63-4900-4255-97c0-c244f833a3ee}ts=python"}}, "type": "repository", "name": "segtools", "full_name": "hoffmanlab/segtools", "uuid": "{981b7f63-4900-4255-97c0-c244f833a3ee}"}, "links": {"attachments": {"href": "data/repositories/hoffmanlab/segtools/issues/50/attachments_page=1.json"}, "self": {"href": "data/repositories/hoffmanlab/segtools/issues/50.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/hoffmanlab/segtools/issues/50/watch"}, "comments": {"href": "data/repositories/hoffmanlab/segtools/issues/50/comments_page=1.json"}, "html": {"href": "#!/hoffmanlab/segtools/issues/50/conflicting-types-in-key_scores-addition"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/hoffmanlab/segtools/issues/50/vote"}}, "reporter": {"display_name": "Rachel Chan", "uuid": "{20430f8d-4e6b-48cc-a8d8-c64868bf7e79}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B20430f8d-4e6b-48cc-a8d8-c64868bf7e79%7D"}, "html": {"href": "https://bitbucket.org/%7B20430f8d-4e6b-48cc-a8d8-c64868bf7e79%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/4397abec9f84e35f1f235b350984833dd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsRC-1.png"}}, "nickname": "rcwchan", "type": "user", "account_id": "557058:e439e22e-8cfc-4cf1-b090-030d33a0730e"}, "title": "Conflicting types in key_scores addition in Segtools overlap", "component": null, "votes": 0, "watches": 2, "content": {"raw": "```\r\n#!python\r\n\r\nTraceback (most recent call last):\r\n  File \"/scratch/software/bin/segtools-overlap\", line 11, in <module>\r\n    load_entry_point('segtools', 'console_scripts', 'segtools-overlap')()\r\n  File \"/scratch/segtools/segtools/overlap.py\", line 452, in main\r\n    overlap(*args, **kwargs)\r\n  File \"/scratch/segtools/segtools/overlap.py\", line 341, in overlap\r\n    quick=quick, dirpath=dirpath, verbose=verbose)\r\n  File \"/scratch/segtools/segtools/overlap.py\", line 112, in calc_overlap\r\n    totals[0:num_scores] += key_scores\r\nTypeError: Cannot cast ufunc add output from dtype('float64') to dtype('int64') with casting rule 'same_kind'\r\n\r\n```\r\n\r\nObtained using a standard bedfile downloaded from ENCODE. \r\n\r\nFrom a brief inspection of the code, `totals` is an array of type int64:\r\n\r\n```\r\n#!python\r\n\r\n 80     totals = zeros(len(sub_labels), dtype=\"int64\")\r\n```\r\n\r\nA possible hint is that `key_scores` derives from `numpy.bincount`, whose documentation implies floats can be returned when weighted ([ref](https://docs.scipy.org/doc/numpy/reference/generated/numpy.bincount.html))\r\n\r\nMay have worked previously due to now-deprecated behavior in numpy? ([ref](https://github.com/numpy/numpy/issues/7225))", "markup": "markdown", "html": "<div class=\"codehilite language-python\"><pre><span></span><span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n  <span class=\"n\">File</span> <span class=\"s2\">&quot;/scratch/software/bin/segtools-overlap&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"o\">&lt;</span><span class=\"n\">module</span><span class=\"o\">&gt;</span>\n    <span class=\"n\">load_entry_point</span><span class=\"p\">(</span><span class=\"s1\">&#39;segtools&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;console_scripts&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;segtools-overlap&#39;</span><span class=\"p\">)()</span>\n  <span class=\"n\">File</span> <span class=\"s2\">&quot;/scratch/segtools/segtools/overlap.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">452</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">main</span>\n    <span class=\"n\">overlap</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n  <span class=\"n\">File</span> <span class=\"s2\">&quot;/scratch/segtools/segtools/overlap.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">341</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">overlap</span>\n    <span class=\"n\">quick</span><span class=\"o\">=</span><span class=\"n\">quick</span><span class=\"p\">,</span> <span class=\"n\">dirpath</span><span class=\"o\">=</span><span class=\"n\">dirpath</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"n\">verbose</span><span class=\"p\">)</span>\n  <span class=\"n\">File</span> <span class=\"s2\">&quot;/scratch/segtools/segtools/overlap.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">112</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">calc_overlap</span>\n    <span class=\"n\">totals</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"n\">num_scores</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"n\">key_scores</span>\n<span class=\"ne\">TypeError</span><span class=\"p\">:</span> <span class=\"n\">Cannot</span> <span class=\"n\">cast</span> <span class=\"n\">ufunc</span> <span class=\"n\">add</span> <span class=\"n\">output</span> <span class=\"kn\">from</span> <span class=\"nn\">dtype</span><span class=\"p\">(</span><span class=\"s1\">&#39;float64&#39;</span><span class=\"p\">)</span> <span class=\"n\">to</span> <span class=\"n\">dtype</span><span class=\"p\">(</span><span class=\"s1\">&#39;int64&#39;</span><span class=\"p\">)</span> <span class=\"k\">with</span> <span class=\"n\">casting</span> <span class=\"n\">rule</span> <span class=\"s1\">&#39;same_kind&#39;</span>\n</pre></div>\n\n\n<p>Obtained using a standard bedfile downloaded from ENCODE. </p>\n<p>From a brief inspection of the code, <code>totals</code> is an array of type int64:</p>\n<div class=\"codehilite language-python\"><pre><span></span> <span class=\"mi\">80</span>     <span class=\"n\">totals</span> <span class=\"o\">=</span> <span class=\"n\">zeros</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">sub_labels</span><span class=\"p\">),</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"s2\">&quot;int64&quot;</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p>A possible hint is that <code>key_scores</code> derives from <code>numpy.bincount</code>, whose documentation implies floats can be returned when weighted (<a data-is-external-link=\"true\" href=\"https://docs.scipy.org/doc/numpy/reference/generated/numpy.bincount.html\" rel=\"nofollow\">ref</a>)</p>\n<p>May have worked previously due to now-deprecated behavior in numpy? (<a data-is-external-link=\"true\" href=\"https://github.com/numpy/numpy/issues/7225\" rel=\"nofollow\">ref</a>)</p>", "type": "rendered"}, "assignee": {"display_name": "Eric Roberts", "uuid": "{cd8c1fe0-28ca-45fb-8ef9-48090b42bb80}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D"}, "html": {"href": "https://bitbucket.org/%7Bcd8c1fe0-28ca-45fb-8ef9-48090b42bb80%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/17548d71dfb29d015b880f48cfc01ca3d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsER-5.png"}}, "nickname": "ericr86", "type": "user", "account_id": "557058:c80ca578-03a1-4ac6-b3ee-50372a3fceee"}, "state": "resolved", "version": null, "edited_on": null, "created_on": "2017-08-11T15:47:52.395560+00:00", "milestone": null, "updated_on": "2018-03-05T14:28:37.695419+00:00", "type": "issue", "id": 50}